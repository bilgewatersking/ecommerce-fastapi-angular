from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from typing import List
from models import MenuItem, CartItem, User, Order, OrderItem
from fastapi.responses import JSONResponse
#import stripe

app = FastAPI()
#stripe.api_key = 'pk_test_51OT6SiGeF8mfOk0r8bSU7nsxvfCIVIyRXA7YaQNQWrvXZ8XzntBOqZuPHA3tWuKbpVHKwwTAHNihb0a9hcLbcSTQ003uEz4Qh6'

origins = ["*"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mock database for demonstration
menu_db = [{"id": "price_1OT6elGeF8mfOk0rlWg1P0xu", "name": "Margherita", "unitPrice": 3.50, "description": "sattapadi 1", "imageUrl":"https://www.yumcurry.com/wp-content/uploads/2020/06/pizza-margherita-recipe.jpg"},
           {"id": "price_1OT6f2GeF8mfOk0rlU1mZ78Z", "name": "Pepperoni", "unitPrice": 5.00, "description": "sattapadi 1", "imageUrl":"https://lilluna.com/wp-content/uploads/2023/01/homemade-pizza3-resize-13.jpg"}]


checkout_db: List[Order] = []


carts_db = {}

db: List[User] = [
    User(
        username="Jamila",
        password="Ahmed",

    ),
    User(
        username="Alex",
        password="Jones",
    ),
]
# User Registration
@app.post("/register/")
def register_user(new_user: User):
    for user in db:
        if user.username == new_user.username:
            raise HTTPException(status_code=400, detail="Username already exists")
    db.append(new_user)
    # db[user.username] = user
    return {"message": "User registered successfully"}

# # User Registration
# @app.post("/register/")
# def register_user(user: User):
#     for user in db:
#         if user.username == user:
#             raise HTTPException(status_code=400, detail="Username already exists")
#     User[user.username] = user
#     return {"message": "User registered successfully"}

# User Login
@app.post("/login/")
def login_user(entered_user: User):
    for user in db:
        if user.username == entered_user.username and user.password == entered_user.password:
            return {"message": "Login successful."}
    raise HTTPException(status_code=401, detail="Login failed. Invalid username or password.")
    

@app.get("/user/")
async def fetch_users():
    return db

# View Menu
@app.get("/menu/", response_model=List[MenuItem])
def get_menu():
    return menu_db

# Get item from menu
@app.get("/menu/{item_id}")
async def get_menu_item(item_id: str):
    for item in menu_db:
        if item["id"] == item_id:
            return item
    return JSONResponse(status_code=404, content={"message": "Item not found"})    

# Add Item to Cart
@app.post("/cart/add/")
def add_to_cart(cart_item: CartItem):
    if cart_item.user_id not in carts_db:
        carts_db[cart_item.user_id] = []
    carts_db[cart_item.user_id].append(cart_item)
    return {"message": "Item added to cart"}

# View Cart
@app.get("/cart/{user_id}/", response_model=List[CartItem])
def view_cart(user_id: str):
    return carts_db.get(user_id, [])

# Delete Item from Cart
@app.delete("/cart/delete/")
def delete_from_cart(user_id: str, item_id: int):
    if user_id in carts_db:
        carts_db[user_id] = [item for item in carts_db[user_id] if item.item_id != item_id]
    return {"message": "Item removed from cart"}

# Checkout Cart
@app.post("/checkout/")
def checkout_cart(item: Order):
    checkout_db.append(item)
    return {"message": "Checkout successful"}

@app.get("/orders/", response_model=List[Order])
def get_orders():
    order_details = []
    order_details = get_order_details(checkout_db)
    return order_details


def get_order_details(orders: List[Order]):
    order_details = []
    for order in orders:
        order_items = []
        for order_item in order.orderItem:
            menu_item = next((item for item in menu_db if item["id"] == order_item.id), None)
            if menu_item:
                order_items.append({
                    "id": order_item.id,
                    "quantity": order_item.quantity,
                    "name": menu_item["name"],
                    "unitPrice": menu_item["unitPrice"],
                    "description": menu_item["description"],
                    "imageUrl": menu_item["imageUrl"]
                })
        order_details.append({
            "totalPrice": order.totalPrice,
            "orderItems": order_items
        })
    return order_details

# Checkout Cart
# @app.post("/cart/checkout/{user_id}/")
# def checkout_cart(user_id: str):
#     if user_id not in carts_db:
#         raise HTTPException(status_code=404, detail="Cart not found")
#     # Implement payment and order processing here
#     del carts_db[user_id]
#     return {"message": "Checkout successful"}



# Payment after checkout
# @app.post("/payment-webhook")
# async def payment_webhook(request: Request):
#     payload = await request.json()
#     event = None

#     try:
#         event = stripe.Event.construct_from(
#             payload, stripe.api_key, stripe.api_version
#         )
#     except ValueError as e:
#         return JSONResponse(status_code=400, content={"error": str(e)})

#     # Handle different event types
#     if event.type == 'checkout.session.completed':
#         # Payment successful, perform necessary actions
#         # e.g., update database, send confirmation email, etc.
#         # Access the payment details using event.data.object

#         return JSONResponse(status_code=200)

# Start the server
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
